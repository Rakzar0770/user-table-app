{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Orezha\\\\user-table-app\\\\src\\\\components\\\\FilterControls.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FilterControls = ({\n  users,\n  onFilterChange\n}) => {\n  _s();\n  const [sortByIdAsc, setSortByIdAsc] = useState(true); // Сортировка по ID\n  const [sortByNameAsc, setSortByNameAsc] = useState(true); // Сортировка по имени\n  const [sortByBirthdateAsc, setSortByBirthdateAsc] = useState(true); // Сортировка по дате рождения\n  const [showAdultsOnly, setShowAdultsOnly] = useState(false); // Фильтр по возрасту\n\n  // Функция для сортировки по ID\n  const handleSortById = () => {\n    const sortedUsers = [...users].sort((a, b) => sortByIdAsc ? a.id - b.id : b.id - a.id);\n    onFilterChange(sortedUsers);\n    setSortByIdAsc(!sortByIdAsc);\n  };\n\n  // Функция для сортировки по имени\n  const handleSortByName = () => {\n    const sortedUsers = [...users].sort((a, b) => sortByNameAsc ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name));\n    onFilterChange(sortedUsers);\n    setSortByNameAsc(!sortByNameAsc);\n  };\n\n  // Функция для сортировки по дате рождения\n  const handleSortByBirthdate = () => {\n    const sortedUsers = [...users].sort((a, b) => {\n      const dateA = new Date(a.birthdate).getTime();\n      const dateB = new Date(b.birthdate).getTime();\n      return sortByBirthdateAsc ? dateA - dateB : dateB - dateA;\n    });\n    onFilterChange(sortedUsers);\n    setSortByBirthdateAsc(!sortByBirthdateAsc);\n  };\n\n  // Функция для фильтрации пользователей старше 18 лет\n  const handleAgeFilter = checked => {\n    setShowAdultsOnly(checked);\n    const filteredUsers = checked ? users.filter(user => calculateAge(new Date(user.birthdate)) > 18) : users;\n    onFilterChange(filteredUsers);\n  };\n\n  // Функция для расчета возраста\n  const calculateAge = birthdate => {\n    const today = new Date();\n    let age = today.getFullYear() - birthdate.getFullYear();\n    const monthDifference = today.getMonth() - birthdate.getMonth();\n    if (monthDifference < 0 || monthDifference === 0 && today.getDate() < birthdate.getDate()) {\n      age--;\n    }\n    return age;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSortById,\n      children: [\"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043F\\u043E ID (\", sortByIdAsc ? '↑' : '↓', \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSortByName,\n      children: [\"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043F\\u043E \\u0438\\u043C\\u0435\\u043D\\u0438 (\", sortByNameAsc ? 'A → Я' : 'Я → A', \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSortByBirthdate,\n      children: [\"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043F\\u043E \\u0434\\u0430\\u0442\\u0435 \\u0440\\u043E\\u0436\\u0434\\u0435\\u043D\\u0438\\u044F (\", sortByBirthdateAsc ? '↑' : '↓', \")\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        onChange: e => handleAgeFilter(e.target.checked)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), \"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u0441\\u043E\\u0432\\u0435\\u0440\\u0448\\u0435\\u043D\\u043D\\u043E\\u043B\\u0435\\u0442\\u043D\\u0438\\u0445\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(FilterControls, \"2EgqvDTY/P1/3ayISjWxwoKDNDE=\");\n_c = FilterControls;\nexport default FilterControls;\nvar _c;\n$RefreshReg$(_c, \"FilterControls\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FilterControls","users","onFilterChange","_s","sortByIdAsc","setSortByIdAsc","sortByNameAsc","setSortByNameAsc","sortByBirthdateAsc","setSortByBirthdateAsc","showAdultsOnly","setShowAdultsOnly","handleSortById","sortedUsers","sort","a","b","id","handleSortByName","name","localeCompare","handleSortByBirthdate","dateA","Date","birthdate","getTime","dateB","handleAgeFilter","checked","filteredUsers","filter","user","calculateAge","today","age","getFullYear","monthDifference","getMonth","getDate","style","marginBottom","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/Orezha/user-table-app/src/components/FilterControls.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { User } from '../types/User';\r\n\r\ninterface FilterControlsProps {\r\n  users: User[]; // Список всех пользователей\r\n  onFilterChange: (filteredUsers: User[]) => void; // Функция для обновления отфильтрованных пользователей\r\n}\r\n\r\nconst FilterControls: React.FC<FilterControlsProps> = ({ users, onFilterChange }) => {\r\n  const [sortByIdAsc, setSortByIdAsc] = useState(true); // Сортировка по ID\r\n  const [sortByNameAsc, setSortByNameAsc] = useState(true); // Сортировка по имени\r\n  const [sortByBirthdateAsc, setSortByBirthdateAsc] = useState(true); // Сортировка по дате рождения\r\n  const [showAdultsOnly, setShowAdultsOnly] = useState(false); // Фильтр по возрасту\r\n\r\n  // Функция для сортировки по ID\r\n  const handleSortById = () => {\r\n    const sortedUsers = [...users].sort((a, b) => (sortByIdAsc ? a.id - b.id : b.id - a.id));\r\n    onFilterChange(sortedUsers);\r\n    setSortByIdAsc(!sortByIdAsc);\r\n  };\r\n\r\n  // Функция для сортировки по имени\r\n  const handleSortByName = () => {\r\n    const sortedUsers = [...users].sort((a, b) =>\r\n      sortByNameAsc ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)\r\n    );\r\n    onFilterChange(sortedUsers);\r\n    setSortByNameAsc(!sortByNameAsc);\r\n  };\r\n\r\n  // Функция для сортировки по дате рождения\r\n  const handleSortByBirthdate = () => {\r\n    const sortedUsers = [...users].sort((a, b) => {\r\n      const dateA = new Date(a.birthdate).getTime();\r\n      const dateB = new Date(b.birthdate).getTime();\r\n      return sortByBirthdateAsc ? dateA - dateB : dateB - dateA;\r\n    });\r\n    onFilterChange(sortedUsers);\r\n    setSortByBirthdateAsc(!sortByBirthdateAsc);\r\n  };\r\n\r\n  // Функция для фильтрации пользователей старше 18 лет\r\n  const handleAgeFilter = (checked: boolean) => {\r\n    setShowAdultsOnly(checked);\r\n    const filteredUsers = checked\r\n      ? users.filter(user => calculateAge(new Date(user.birthdate)) > 18)\r\n      : users;\r\n    onFilterChange(filteredUsers);\r\n  };\r\n\r\n  // Функция для расчета возраста\r\n  const calculateAge = (birthdate: Date): number => {\r\n    const today = new Date();\r\n    let age = today.getFullYear() - birthdate.getFullYear();\r\n    const monthDifference = today.getMonth() - birthdate.getMonth();\r\n    if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthdate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: '20px' }}>\r\n      {/* Кнопка сортировки по ID */}\r\n      <button onClick={handleSortById}>Сортировать по ID ({sortByIdAsc ? '↑' : '↓'})</button>\r\n\r\n      {/* Кнопка сортировки по имени */}\r\n      <button onClick={handleSortByName}>\r\n        Сортировать по имени ({sortByNameAsc ? 'A → Я' : 'Я → A'})\r\n      </button>\r\n\r\n      {/* Кнопка сортировки по дате рождения */}\r\n      <button onClick={handleSortByBirthdate}>\r\n        Сортировать по дате рождения ({sortByBirthdateAsc ? '↑' : '↓'})\r\n      </button>\r\n\r\n      {/* Чекбокс для фильтрации совершеннолетних */}\r\n      <label>\r\n        <input type=\"checkbox\" onChange={e => handleAgeFilter(e.target.checked)} />\r\n        Показать только совершеннолетних\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterControls;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAQxC,MAAMC,cAA6C,GAAGA,CAAC;EAAEC,KAAK;EAAEC;AAAe,CAAC,KAAK;EAAAC,EAAA;EACnF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACtD,MAAM,CAACS,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC1D,MAAM,CAACW,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACpE,MAAM,CAACa,cAAc,EAAEC,iBAAiB,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;;EAE7D;EACA,MAAMe,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMC,WAAW,GAAG,CAAC,GAAGZ,KAAK,CAAC,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAMZ,WAAW,GAAGW,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,GAAGD,CAAC,CAACC,EAAE,GAAGF,CAAC,CAACE,EAAG,CAAC;IACxFf,cAAc,CAACW,WAAW,CAAC;IAC3BR,cAAc,CAAC,CAACD,WAAW,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMc,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,MAAML,WAAW,GAAG,CAAC,GAAGZ,KAAK,CAAC,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACvCV,aAAa,GAAGS,CAAC,CAACI,IAAI,CAACC,aAAa,CAACJ,CAAC,CAACG,IAAI,CAAC,GAAGH,CAAC,CAACG,IAAI,CAACC,aAAa,CAACL,CAAC,CAACI,IAAI,CAC5E,CAAC;IACDjB,cAAc,CAACW,WAAW,CAAC;IAC3BN,gBAAgB,CAAC,CAACD,aAAa,CAAC;EAClC,CAAC;;EAED;EACA,MAAMe,qBAAqB,GAAGA,CAAA,KAAM;IAClC,MAAMR,WAAW,GAAG,CAAC,GAAGZ,KAAK,CAAC,CAACa,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;MAC5C,MAAMM,KAAK,GAAG,IAAIC,IAAI,CAACR,CAAC,CAACS,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC;MAC7C,MAAMC,KAAK,GAAG,IAAIH,IAAI,CAACP,CAAC,CAACQ,SAAS,CAAC,CAACC,OAAO,CAAC,CAAC;MAC7C,OAAOjB,kBAAkB,GAAGc,KAAK,GAAGI,KAAK,GAAGA,KAAK,GAAGJ,KAAK;IAC3D,CAAC,CAAC;IACFpB,cAAc,CAACW,WAAW,CAAC;IAC3BJ,qBAAqB,CAAC,CAACD,kBAAkB,CAAC;EAC5C,CAAC;;EAED;EACA,MAAMmB,eAAe,GAAIC,OAAgB,IAAK;IAC5CjB,iBAAiB,CAACiB,OAAO,CAAC;IAC1B,MAAMC,aAAa,GAAGD,OAAO,GACzB3B,KAAK,CAAC6B,MAAM,CAACC,IAAI,IAAIC,YAAY,CAAC,IAAIT,IAAI,CAACQ,IAAI,CAACP,SAAS,CAAC,CAAC,GAAG,EAAE,CAAC,GACjEvB,KAAK;IACTC,cAAc,CAAC2B,aAAa,CAAC;EAC/B,CAAC;;EAED;EACA,MAAMG,YAAY,GAAIR,SAAe,IAAa;IAChD,MAAMS,KAAK,GAAG,IAAIV,IAAI,CAAC,CAAC;IACxB,IAAIW,GAAG,GAAGD,KAAK,CAACE,WAAW,CAAC,CAAC,GAAGX,SAAS,CAACW,WAAW,CAAC,CAAC;IACvD,MAAMC,eAAe,GAAGH,KAAK,CAACI,QAAQ,CAAC,CAAC,GAAGb,SAAS,CAACa,QAAQ,CAAC,CAAC;IAC/D,IAAID,eAAe,GAAG,CAAC,IAAKA,eAAe,KAAK,CAAC,IAAIH,KAAK,CAACK,OAAO,CAAC,CAAC,GAAGd,SAAS,CAACc,OAAO,CAAC,CAAE,EAAE;MAC3FJ,GAAG,EAAE;IACP;IACA,OAAOA,GAAG;EACZ,CAAC;EAED,oBACEnC,OAAA;IAAKwC,KAAK,EAAE;MAAEC,YAAY,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAEnC1C,OAAA;MAAQ2C,OAAO,EAAE9B,cAAe;MAAA6B,QAAA,GAAC,sFAAmB,EAACrC,WAAW,GAAG,GAAG,GAAG,GAAG,EAAC,GAAC;IAAA;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAGvF/C,OAAA;MAAQ2C,OAAO,EAAExB,gBAAiB;MAAAuB,QAAA,GAAC,kHACX,EAACnC,aAAa,GAAG,OAAO,GAAG,OAAO,EAAC,GAC3D;IAAA;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAGT/C,OAAA;MAAQ2C,OAAO,EAAErB,qBAAsB;MAAAoB,QAAA,GAAC,6JACR,EAACjC,kBAAkB,GAAG,GAAG,GAAG,GAAG,EAAC,GAChE;IAAA;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAGT/C,OAAA;MAAA0C,QAAA,gBACE1C,OAAA;QAAOgD,IAAI,EAAC,UAAU;QAACC,QAAQ,EAAEC,CAAC,IAAItB,eAAe,CAACsB,CAAC,CAACC,MAAM,CAACtB,OAAO;MAAE;QAAAe,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,0LAE7E;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEV,CAAC;AAAC3C,EAAA,CA3EIH,cAA6C;AAAAmD,EAAA,GAA7CnD,cAA6C;AA6EnD,eAAeA,cAAc;AAAC,IAAAmD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}