{"ast":null,"code":"import React,{useState}from'react';import{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";const FilterControls=_ref=>{let{users,onFilterChange}=_ref;const[sortByIdAsc,setSortByIdAsc]=useState(true);// Сортировка по ID\nconst[sortByNameAsc,setSortByNameAsc]=useState(true);// Сортировка по имени\nconst[sortByBirthdateAsc,setSortByBirthdateAsc]=useState(true);// Сортировка по дате рождения\nconst[showAdultsOnly,setShowAdultsOnly]=useState(false);// Фильтр по возрасту\n// Функция для сортировки по ID\nconst handleSortById=()=>{const sortedUsers=[...users].sort((a,b)=>sortByIdAsc?a.id-b.id:b.id-a.id);onFilterChange(sortedUsers);setSortByIdAsc(!sortByIdAsc);};// Функция для сортировки по имени\nconst handleSortByName=()=>{const sortedUsers=[...users].sort((a,b)=>sortByNameAsc?a.name.localeCompare(b.name):b.name.localeCompare(a.name));onFilterChange(sortedUsers);setSortByNameAsc(!sortByNameAsc);};// Функция для сортировки по дате рождения\nconst handleSortByBirthdate=()=>{const sortedUsers=[...users].sort((a,b)=>{const dateA=new Date(a.birthdate).getTime();const dateB=new Date(b.birthdate).getTime();return sortByBirthdateAsc?dateA-dateB:dateB-dateA;});onFilterChange(sortedUsers);setSortByBirthdateAsc(!sortByBirthdateAsc);};// Функция для фильтрации пользователей старше 18 лет\nconst handleAgeFilter=checked=>{setShowAdultsOnly(checked);const filteredUsers=checked?users.filter(user=>calculateAge(new Date(user.birthdate))>18):users;onFilterChange(filteredUsers);};// Функция для расчета возраста\nconst calculateAge=birthdate=>{const today=new Date();let age=today.getFullYear()-birthdate.getFullYear();const monthDifference=today.getMonth()-birthdate.getMonth();if(monthDifference<0||monthDifference===0&&today.getDate()<birthdate.getDate()){age--;}return age;};return/*#__PURE__*/_jsxs(\"div\",{style:{marginBottom:'20px'},children:[/*#__PURE__*/_jsxs(\"button\",{onClick:handleSortById,children:[\"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043F\\u043E ID (\",sortByIdAsc?'↑':'↓',\")\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleSortByName,children:[\"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043F\\u043E \\u0438\\u043C\\u0435\\u043D\\u0438 (\",sortByNameAsc?'A → Я':'Я → A',\")\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:handleSortByBirthdate,children:[\"\\u0421\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C \\u043F\\u043E \\u0434\\u0430\\u0442\\u0435 \\u0440\\u043E\\u0436\\u0434\\u0435\\u043D\\u0438\\u044F (\",sortByBirthdateAsc?'↑':'↓',\")\"]}),/*#__PURE__*/_jsxs(\"label\",{children:[/*#__PURE__*/_jsx(\"input\",{type:\"checkbox\",onChange:e=>handleAgeFilter(e.target.checked)}),\"\\u041F\\u043E\\u043A\\u0430\\u0437\\u0430\\u0442\\u044C \\u0442\\u043E\\u043B\\u044C\\u043A\\u043E \\u0441\\u043E\\u0432\\u0435\\u0440\\u0448\\u0435\\u043D\\u043D\\u043E\\u043B\\u0435\\u0442\\u043D\\u0438\\u0445\"]})]});};export default FilterControls;","map":{"version":3,"names":["React","useState","jsxs","_jsxs","jsx","_jsx","FilterControls","_ref","users","onFilterChange","sortByIdAsc","setSortByIdAsc","sortByNameAsc","setSortByNameAsc","sortByBirthdateAsc","setSortByBirthdateAsc","showAdultsOnly","setShowAdultsOnly","handleSortById","sortedUsers","sort","a","b","id","handleSortByName","name","localeCompare","handleSortByBirthdate","dateA","Date","birthdate","getTime","dateB","handleAgeFilter","checked","filteredUsers","filter","user","calculateAge","today","age","getFullYear","monthDifference","getMonth","getDate","style","marginBottom","children","onClick","type","onChange","e","target"],"sources":["C:/Users/Orezha/user-table-app/src/components/FilterControls.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { User } from '../types/User';\r\n\r\ninterface FilterControlsProps {\r\n  users: User[]; // Список всех пользователей\r\n  onFilterChange: (filteredUsers: User[]) => void; // Функция для обновления отфильтрованных пользователей\r\n}\r\n\r\nconst FilterControls: React.FC<FilterControlsProps> = ({ users, onFilterChange }) => {\r\n  const [sortByIdAsc, setSortByIdAsc] = useState(true); // Сортировка по ID\r\n  const [sortByNameAsc, setSortByNameAsc] = useState(true); // Сортировка по имени\r\n  const [sortByBirthdateAsc, setSortByBirthdateAsc] = useState(true); // Сортировка по дате рождения\r\n  const [showAdultsOnly, setShowAdultsOnly] = useState(false); // Фильтр по возрасту\r\n\r\n  // Функция для сортировки по ID\r\n  const handleSortById = () => {\r\n    const sortedUsers = [...users].sort((a, b) => (sortByIdAsc ? a.id - b.id : b.id - a.id));\r\n    onFilterChange(sortedUsers);\r\n    setSortByIdAsc(!sortByIdAsc);\r\n  };\r\n\r\n  // Функция для сортировки по имени\r\n  const handleSortByName = () => {\r\n    const sortedUsers = [...users].sort((a, b) =>\r\n      sortByNameAsc ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)\r\n    );\r\n    onFilterChange(sortedUsers);\r\n    setSortByNameAsc(!sortByNameAsc);\r\n  };\r\n\r\n  // Функция для сортировки по дате рождения\r\n  const handleSortByBirthdate = () => {\r\n    const sortedUsers = [...users].sort((a, b) => {\r\n      const dateA = new Date(a.birthdate).getTime();\r\n      const dateB = new Date(b.birthdate).getTime();\r\n      return sortByBirthdateAsc ? dateA - dateB : dateB - dateA;\r\n    });\r\n    onFilterChange(sortedUsers);\r\n    setSortByBirthdateAsc(!sortByBirthdateAsc);\r\n  };\r\n\r\n  // Функция для фильтрации пользователей старше 18 лет\r\n  const handleAgeFilter = (checked: boolean) => {\r\n    setShowAdultsOnly(checked);\r\n    const filteredUsers = checked\r\n      ? users.filter(user => calculateAge(new Date(user.birthdate)) > 18)\r\n      : users;\r\n    onFilterChange(filteredUsers);\r\n  };\r\n\r\n  // Функция для расчета возраста\r\n  const calculateAge = (birthdate: Date): number => {\r\n    const today = new Date();\r\n    let age = today.getFullYear() - birthdate.getFullYear();\r\n    const monthDifference = today.getMonth() - birthdate.getMonth();\r\n    if (monthDifference < 0 || (monthDifference === 0 && today.getDate() < birthdate.getDate())) {\r\n      age--;\r\n    }\r\n    return age;\r\n  };\r\n\r\n  return (\r\n    <div style={{ marginBottom: '20px' }}>\r\n      {/* Кнопка сортировки по ID */}\r\n      <button onClick={handleSortById}>Сортировать по ID ({sortByIdAsc ? '↑' : '↓'})</button>\r\n\r\n      {/* Кнопка сортировки по имени */}\r\n      <button onClick={handleSortByName}>\r\n        Сортировать по имени ({sortByNameAsc ? 'A → Я' : 'Я → A'})\r\n      </button>\r\n\r\n      {/* Кнопка сортировки по дате рождения */}\r\n      <button onClick={handleSortByBirthdate}>\r\n        Сортировать по дате рождения ({sortByBirthdateAsc ? '↑' : '↓'})\r\n      </button>\r\n\r\n      {/* Чекбокс для фильтрации совершеннолетних */}\r\n      <label>\r\n        <input type=\"checkbox\" onChange={e => handleAgeFilter(e.target.checked)} />\r\n        Показать только совершеннолетних\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FilterControls;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}